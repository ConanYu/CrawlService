// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: goodguy_crawl.proto

package proto

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	GoodguyCrawlService_GetContestRecord_FullMethodName = "/goodguy_crawl.GoodguyCrawlService/GetContestRecord"
	GoodguyCrawlService_GetSubmitRecord_FullMethodName  = "/goodguy_crawl.GoodguyCrawlService/GetSubmitRecord"
	GoodguyCrawlService_GetRecentContest_FullMethodName = "/goodguy_crawl.GoodguyCrawlService/GetRecentContest"
	GoodguyCrawlService_GetDailyQuestion_FullMethodName = "/goodguy_crawl.GoodguyCrawlService/GetDailyQuestion"
)

// GoodguyCrawlServiceClient is the client API for GoodguyCrawlService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GoodguyCrawlServiceClient interface {
	GetContestRecord(ctx context.Context, in *GetContestRecordRequest, opts ...grpc.CallOption) (*GetContestRecordResponse, error)
	GetSubmitRecord(ctx context.Context, in *GetSubmitRecordRequest, opts ...grpc.CallOption) (*GetSubmitRecordResponse, error)
	GetRecentContest(ctx context.Context, in *GetRecentContestRequest, opts ...grpc.CallOption) (*GetRecentContestResponse, error)
	GetDailyQuestion(ctx context.Context, in *GetDailyQuestionRequest, opts ...grpc.CallOption) (*GetDailyQuestionResponse, error)
}

type goodguyCrawlServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGoodguyCrawlServiceClient(cc grpc.ClientConnInterface) GoodguyCrawlServiceClient {
	return &goodguyCrawlServiceClient{cc}
}

func (c *goodguyCrawlServiceClient) GetContestRecord(ctx context.Context, in *GetContestRecordRequest, opts ...grpc.CallOption) (*GetContestRecordResponse, error) {
	out := new(GetContestRecordResponse)
	err := c.cc.Invoke(ctx, GoodguyCrawlService_GetContestRecord_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodguyCrawlServiceClient) GetSubmitRecord(ctx context.Context, in *GetSubmitRecordRequest, opts ...grpc.CallOption) (*GetSubmitRecordResponse, error) {
	out := new(GetSubmitRecordResponse)
	err := c.cc.Invoke(ctx, GoodguyCrawlService_GetSubmitRecord_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodguyCrawlServiceClient) GetRecentContest(ctx context.Context, in *GetRecentContestRequest, opts ...grpc.CallOption) (*GetRecentContestResponse, error) {
	out := new(GetRecentContestResponse)
	err := c.cc.Invoke(ctx, GoodguyCrawlService_GetRecentContest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodguyCrawlServiceClient) GetDailyQuestion(ctx context.Context, in *GetDailyQuestionRequest, opts ...grpc.CallOption) (*GetDailyQuestionResponse, error) {
	out := new(GetDailyQuestionResponse)
	err := c.cc.Invoke(ctx, GoodguyCrawlService_GetDailyQuestion_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GoodguyCrawlServiceServer is the server API for GoodguyCrawlService service.
// All implementations must embed UnimplementedGoodguyCrawlServiceServer
// for forward compatibility
type GoodguyCrawlServiceServer interface {
	GetContestRecord(context.Context, *GetContestRecordRequest) (*GetContestRecordResponse, error)
	GetSubmitRecord(context.Context, *GetSubmitRecordRequest) (*GetSubmitRecordResponse, error)
	GetRecentContest(context.Context, *GetRecentContestRequest) (*GetRecentContestResponse, error)
	GetDailyQuestion(context.Context, *GetDailyQuestionRequest) (*GetDailyQuestionResponse, error)
	mustEmbedUnimplementedGoodguyCrawlServiceServer()
}

// UnimplementedGoodguyCrawlServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGoodguyCrawlServiceServer struct {
}

func (UnimplementedGoodguyCrawlServiceServer) GetContestRecord(context.Context, *GetContestRecordRequest) (*GetContestRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContestRecord not implemented")
}
func (UnimplementedGoodguyCrawlServiceServer) GetSubmitRecord(context.Context, *GetSubmitRecordRequest) (*GetSubmitRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubmitRecord not implemented")
}
func (UnimplementedGoodguyCrawlServiceServer) GetRecentContest(context.Context, *GetRecentContestRequest) (*GetRecentContestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecentContest not implemented")
}
func (UnimplementedGoodguyCrawlServiceServer) GetDailyQuestion(context.Context, *GetDailyQuestionRequest) (*GetDailyQuestionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDailyQuestion not implemented")
}
func (UnimplementedGoodguyCrawlServiceServer) mustEmbedUnimplementedGoodguyCrawlServiceServer() {}

// UnsafeGoodguyCrawlServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GoodguyCrawlServiceServer will
// result in compilation errors.
type UnsafeGoodguyCrawlServiceServer interface {
	mustEmbedUnimplementedGoodguyCrawlServiceServer()
}

func RegisterGoodguyCrawlServiceServer(s grpc.ServiceRegistrar, srv GoodguyCrawlServiceServer) {
	s.RegisterService(&GoodguyCrawlService_ServiceDesc, srv)
}

func _GoodguyCrawlService_GetContestRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetContestRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodguyCrawlServiceServer).GetContestRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoodguyCrawlService_GetContestRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodguyCrawlServiceServer).GetContestRecord(ctx, req.(*GetContestRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoodguyCrawlService_GetSubmitRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubmitRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodguyCrawlServiceServer).GetSubmitRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoodguyCrawlService_GetSubmitRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodguyCrawlServiceServer).GetSubmitRecord(ctx, req.(*GetSubmitRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoodguyCrawlService_GetRecentContest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRecentContestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodguyCrawlServiceServer).GetRecentContest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoodguyCrawlService_GetRecentContest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodguyCrawlServiceServer).GetRecentContest(ctx, req.(*GetRecentContestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoodguyCrawlService_GetDailyQuestion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDailyQuestionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodguyCrawlServiceServer).GetDailyQuestion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoodguyCrawlService_GetDailyQuestion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodguyCrawlServiceServer).GetDailyQuestion(ctx, req.(*GetDailyQuestionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GoodguyCrawlService_ServiceDesc is the grpc.ServiceDesc for GoodguyCrawlService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GoodguyCrawlService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "goodguy_crawl.GoodguyCrawlService",
	HandlerType: (*GoodguyCrawlServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetContestRecord",
			Handler:    _GoodguyCrawlService_GetContestRecord_Handler,
		},
		{
			MethodName: "GetSubmitRecord",
			Handler:    _GoodguyCrawlService_GetSubmitRecord_Handler,
		},
		{
			MethodName: "GetRecentContest",
			Handler:    _GoodguyCrawlService_GetRecentContest_Handler,
		},
		{
			MethodName: "GetDailyQuestion",
			Handler:    _GoodguyCrawlService_GetDailyQuestion_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "goodguy_crawl.proto",
}
