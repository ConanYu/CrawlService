// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.29.0
// 	protoc        v3.21.12
// source: goodguy_crawl.proto

package proto

import (
	reflect "reflect"
	sync "sync"

	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetSubmitRecordResponse_SubmitRecord_Verdict int32

const (
	GetSubmitRecordResponse_SubmitRecord_Other                   GetSubmitRecordResponse_SubmitRecord_Verdict = 0
	GetSubmitRecordResponse_SubmitRecord_Accepted                GetSubmitRecordResponse_SubmitRecord_Verdict = 1
	GetSubmitRecordResponse_SubmitRecord_WrongAnswer             GetSubmitRecordResponse_SubmitRecord_Verdict = 2
	GetSubmitRecordResponse_SubmitRecord_RuntimeError            GetSubmitRecordResponse_SubmitRecord_Verdict = 3
	GetSubmitRecordResponse_SubmitRecord_TimeLimitExceeded       GetSubmitRecordResponse_SubmitRecord_Verdict = 4
	GetSubmitRecordResponse_SubmitRecord_MemoryLimitExceeded     GetSubmitRecordResponse_SubmitRecord_Verdict = 5
	GetSubmitRecordResponse_SubmitRecord_CompilationError        GetSubmitRecordResponse_SubmitRecord_Verdict = 6
	GetSubmitRecordResponse_SubmitRecord_PresentationError       GetSubmitRecordResponse_SubmitRecord_Verdict = 7
	GetSubmitRecordResponse_SubmitRecord_IdlenessLimitExceeded   GetSubmitRecordResponse_SubmitRecord_Verdict = 8
	GetSubmitRecordResponse_SubmitRecord_SecurityViolated        GetSubmitRecordResponse_SubmitRecord_Verdict = 9
	GetSubmitRecordResponse_SubmitRecord_Crashed                 GetSubmitRecordResponse_SubmitRecord_Verdict = 10
	GetSubmitRecordResponse_SubmitRecord_InputPreparationCrashed GetSubmitRecordResponse_SubmitRecord_Verdict = 11
	GetSubmitRecordResponse_SubmitRecord_Partial                 GetSubmitRecordResponse_SubmitRecord_Verdict = 12
	GetSubmitRecordResponse_SubmitRecord_Challenged              GetSubmitRecordResponse_SubmitRecord_Verdict = 13
	GetSubmitRecordResponse_SubmitRecord_Skipped                 GetSubmitRecordResponse_SubmitRecord_Verdict = 14
	GetSubmitRecordResponse_SubmitRecord_Testing                 GetSubmitRecordResponse_SubmitRecord_Verdict = 15
	GetSubmitRecordResponse_SubmitRecord_Rejected                GetSubmitRecordResponse_SubmitRecord_Verdict = 16
	GetSubmitRecordResponse_SubmitRecord_OutputLimitExceeded     GetSubmitRecordResponse_SubmitRecord_Verdict = 17
)

// Enum value maps for GetSubmitRecordResponse_SubmitRecord_Verdict.
var (
	GetSubmitRecordResponse_SubmitRecord_Verdict_name = map[int32]string{
		0:  "Other",
		1:  "Accepted",
		2:  "WrongAnswer",
		3:  "RuntimeError",
		4:  "TimeLimitExceeded",
		5:  "MemoryLimitExceeded",
		6:  "CompilationError",
		7:  "PresentationError",
		8:  "IdlenessLimitExceeded",
		9:  "SecurityViolated",
		10: "Crashed",
		11: "InputPreparationCrashed",
		12: "Partial",
		13: "Challenged",
		14: "Skipped",
		15: "Testing",
		16: "Rejected",
		17: "OutputLimitExceeded",
	}
	GetSubmitRecordResponse_SubmitRecord_Verdict_value = map[string]int32{
		"Other":                   0,
		"Accepted":                1,
		"WrongAnswer":             2,
		"RuntimeError":            3,
		"TimeLimitExceeded":       4,
		"MemoryLimitExceeded":     5,
		"CompilationError":        6,
		"PresentationError":       7,
		"IdlenessLimitExceeded":   8,
		"SecurityViolated":        9,
		"Crashed":                 10,
		"InputPreparationCrashed": 11,
		"Partial":                 12,
		"Challenged":              13,
		"Skipped":                 14,
		"Testing":                 15,
		"Rejected":                16,
		"OutputLimitExceeded":     17,
	}
)

func (x GetSubmitRecordResponse_SubmitRecord_Verdict) Enum() *GetSubmitRecordResponse_SubmitRecord_Verdict {
	p := new(GetSubmitRecordResponse_SubmitRecord_Verdict)
	*p = x
	return p
}

func (x GetSubmitRecordResponse_SubmitRecord_Verdict) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetSubmitRecordResponse_SubmitRecord_Verdict) Descriptor() protoreflect.EnumDescriptor {
	return file_goodguy_crawl_proto_enumTypes[0].Descriptor()
}

func (GetSubmitRecordResponse_SubmitRecord_Verdict) Type() protoreflect.EnumType {
	return &file_goodguy_crawl_proto_enumTypes[0]
}

func (x GetSubmitRecordResponse_SubmitRecord_Verdict) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GetSubmitRecordResponse_SubmitRecord_Verdict.Descriptor instead.
func (GetSubmitRecordResponse_SubmitRecord_Verdict) EnumDescriptor() ([]byte, []int) {
	return file_goodguy_crawl_proto_rawDescGZIP(), []int{4, 0, 0}
}

type GetSubmitRecordResponse_SubmitRecord_ProgrammingLanguage int32

const (
	GetSubmitRecordResponse_SubmitRecord_Unknown    GetSubmitRecordResponse_SubmitRecord_ProgrammingLanguage = 0
	GetSubmitRecordResponse_SubmitRecord_Cpp        GetSubmitRecordResponse_SubmitRecord_ProgrammingLanguage = 1
	GetSubmitRecordResponse_SubmitRecord_Java       GetSubmitRecordResponse_SubmitRecord_ProgrammingLanguage = 2
	GetSubmitRecordResponse_SubmitRecord_Python     GetSubmitRecordResponse_SubmitRecord_ProgrammingLanguage = 3
	GetSubmitRecordResponse_SubmitRecord_Golang     GetSubmitRecordResponse_SubmitRecord_ProgrammingLanguage = 4
	GetSubmitRecordResponse_SubmitRecord_C          GetSubmitRecordResponse_SubmitRecord_ProgrammingLanguage = 5
	GetSubmitRecordResponse_SubmitRecord_CSharp     GetSubmitRecordResponse_SubmitRecord_ProgrammingLanguage = 6
	GetSubmitRecordResponse_SubmitRecord_Kotlin     GetSubmitRecordResponse_SubmitRecord_ProgrammingLanguage = 7
	GetSubmitRecordResponse_SubmitRecord_JavaScript GetSubmitRecordResponse_SubmitRecord_ProgrammingLanguage = 8
	GetSubmitRecordResponse_SubmitRecord_TypeScript GetSubmitRecordResponse_SubmitRecord_ProgrammingLanguage = 9
	GetSubmitRecordResponse_SubmitRecord_Lua        GetSubmitRecordResponse_SubmitRecord_ProgrammingLanguage = 10
	GetSubmitRecordResponse_SubmitRecord_ObjectiveC GetSubmitRecordResponse_SubmitRecord_ProgrammingLanguage = 11
	GetSubmitRecordResponse_SubmitRecord_Swift      GetSubmitRecordResponse_SubmitRecord_ProgrammingLanguage = 12
	GetSubmitRecordResponse_SubmitRecord_Rust       GetSubmitRecordResponse_SubmitRecord_ProgrammingLanguage = 13
	GetSubmitRecordResponse_SubmitRecord_Scala      GetSubmitRecordResponse_SubmitRecord_ProgrammingLanguage = 14
	GetSubmitRecordResponse_SubmitRecord_Pascal     GetSubmitRecordResponse_SubmitRecord_ProgrammingLanguage = 15
	GetSubmitRecordResponse_SubmitRecord_Haskell    GetSubmitRecordResponse_SubmitRecord_ProgrammingLanguage = 16
	GetSubmitRecordResponse_SubmitRecord_Ruby       GetSubmitRecordResponse_SubmitRecord_ProgrammingLanguage = 17
	GetSubmitRecordResponse_SubmitRecord_PHP        GetSubmitRecordResponse_SubmitRecord_ProgrammingLanguage = 18
	GetSubmitRecordResponse_SubmitRecord_Erlang     GetSubmitRecordResponse_SubmitRecord_ProgrammingLanguage = 19
	GetSubmitRecordResponse_SubmitRecord_Elixir     GetSubmitRecordResponse_SubmitRecord_ProgrammingLanguage = 20
	GetSubmitRecordResponse_SubmitRecord_Racket     GetSubmitRecordResponse_SubmitRecord_ProgrammingLanguage = 21
)

// Enum value maps for GetSubmitRecordResponse_SubmitRecord_ProgrammingLanguage.
var (
	GetSubmitRecordResponse_SubmitRecord_ProgrammingLanguage_name = map[int32]string{
		0:  "Unknown",
		1:  "Cpp",
		2:  "Java",
		3:  "Python",
		4:  "Golang",
		5:  "C",
		6:  "CSharp",
		7:  "Kotlin",
		8:  "JavaScript",
		9:  "TypeScript",
		10: "Lua",
		11: "ObjectiveC",
		12: "Swift",
		13: "Rust",
		14: "Scala",
		15: "Pascal",
		16: "Haskell",
		17: "Ruby",
		18: "PHP",
		19: "Erlang",
		20: "Elixir",
		21: "Racket",
	}
	GetSubmitRecordResponse_SubmitRecord_ProgrammingLanguage_value = map[string]int32{
		"Unknown":    0,
		"Cpp":        1,
		"Java":       2,
		"Python":     3,
		"Golang":     4,
		"C":          5,
		"CSharp":     6,
		"Kotlin":     7,
		"JavaScript": 8,
		"TypeScript": 9,
		"Lua":        10,
		"ObjectiveC": 11,
		"Swift":      12,
		"Rust":       13,
		"Scala":      14,
		"Pascal":     15,
		"Haskell":    16,
		"Ruby":       17,
		"PHP":        18,
		"Erlang":     19,
		"Elixir":     20,
		"Racket":     21,
	}
)

func (x GetSubmitRecordResponse_SubmitRecord_ProgrammingLanguage) Enum() *GetSubmitRecordResponse_SubmitRecord_ProgrammingLanguage {
	p := new(GetSubmitRecordResponse_SubmitRecord_ProgrammingLanguage)
	*p = x
	return p
}

func (x GetSubmitRecordResponse_SubmitRecord_ProgrammingLanguage) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetSubmitRecordResponse_SubmitRecord_ProgrammingLanguage) Descriptor() protoreflect.EnumDescriptor {
	return file_goodguy_crawl_proto_enumTypes[1].Descriptor()
}

func (GetSubmitRecordResponse_SubmitRecord_ProgrammingLanguage) Type() protoreflect.EnumType {
	return &file_goodguy_crawl_proto_enumTypes[1]
}

func (x GetSubmitRecordResponse_SubmitRecord_ProgrammingLanguage) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GetSubmitRecordResponse_SubmitRecord_ProgrammingLanguage.Descriptor instead.
func (GetSubmitRecordResponse_SubmitRecord_ProgrammingLanguage) EnumDescriptor() ([]byte, []int) {
	return file_goodguy_crawl_proto_rawDescGZIP(), []int{4, 0, 1}
}

type AuthInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
}

func (x *AuthInfo) Reset() {
	*x = AuthInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_goodguy_crawl_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthInfo) ProtoMessage() {}

func (x *AuthInfo) ProtoReflect() protoreflect.Message {
	mi := &file_goodguy_crawl_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthInfo.ProtoReflect.Descriptor instead.
func (*AuthInfo) Descriptor() ([]byte, []int) {
	return file_goodguy_crawl_proto_rawDescGZIP(), []int{0}
}

func (x *AuthInfo) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *AuthInfo) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type GetContestRecordRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Platform string `protobuf:"bytes,1,opt,name=platform,proto3" json:"platform,omitempty"`
	Handle   string `protobuf:"bytes,2,opt,name=handle,proto3" json:"handle,omitempty"` // 用户名
}

func (x *GetContestRecordRequest) Reset() {
	*x = GetContestRecordRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_goodguy_crawl_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetContestRecordRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetContestRecordRequest) ProtoMessage() {}

func (x *GetContestRecordRequest) ProtoReflect() protoreflect.Message {
	mi := &file_goodguy_crawl_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetContestRecordRequest.ProtoReflect.Descriptor instead.
func (*GetContestRecordRequest) Descriptor() ([]byte, []int) {
	return file_goodguy_crawl_proto_rawDescGZIP(), []int{1}
}

func (x *GetContestRecordRequest) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

func (x *GetContestRecordRequest) GetHandle() string {
	if x != nil {
		return x.Handle
	}
	return ""
}

type GetContestRecordResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProfileUrl string                             `protobuf:"bytes,1,opt,name=profile_url,json=profileUrl,proto3" json:"profile_url,omitempty"` // 用户页面URL
	Rating     int32                              `protobuf:"varint,2,opt,name=rating,proto3" json:"rating,omitempty"`                          // 当前rating 没有参加过则为0
	Length     int32                              `protobuf:"varint,3,opt,name=length,proto3" json:"length,omitempty"`                          // 参加比赛场次
	Record     []*GetContestRecordResponse_Record `protobuf:"bytes,4,rep,name=record,proto3" json:"record,omitempty"`
	Platform   string                             `protobuf:"bytes,5,opt,name=platform,proto3" json:"platform,omitempty"`
	Handle     string                             `protobuf:"bytes,6,opt,name=handle,proto3" json:"handle,omitempty"` // 用户名
}

func (x *GetContestRecordResponse) Reset() {
	*x = GetContestRecordResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_goodguy_crawl_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetContestRecordResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetContestRecordResponse) ProtoMessage() {}

func (x *GetContestRecordResponse) ProtoReflect() protoreflect.Message {
	mi := &file_goodguy_crawl_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetContestRecordResponse.ProtoReflect.Descriptor instead.
func (*GetContestRecordResponse) Descriptor() ([]byte, []int) {
	return file_goodguy_crawl_proto_rawDescGZIP(), []int{2}
}

func (x *GetContestRecordResponse) GetProfileUrl() string {
	if x != nil {
		return x.ProfileUrl
	}
	return ""
}

func (x *GetContestRecordResponse) GetRating() int32 {
	if x != nil {
		return x.Rating
	}
	return 0
}

func (x *GetContestRecordResponse) GetLength() int32 {
	if x != nil {
		return x.Length
	}
	return 0
}

func (x *GetContestRecordResponse) GetRecord() []*GetContestRecordResponse_Record {
	if x != nil {
		return x.Record
	}
	return nil
}

func (x *GetContestRecordResponse) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

func (x *GetContestRecordResponse) GetHandle() string {
	if x != nil {
		return x.Handle
	}
	return ""
}

type GetSubmitRecordRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Platform string    `protobuf:"bytes,1,opt,name=platform,proto3" json:"platform,omitempty"`
	Handle   string    `protobuf:"bytes,2,opt,name=handle,proto3" json:"handle,omitempty"`                           // 用户名
	AuthInfo *AuthInfo `protobuf:"bytes,3,opt,name=auth_info,json=authInfo,proto3,oneof" json:"auth_info,omitempty"` // ONLY NEED FOR vjudge
}

func (x *GetSubmitRecordRequest) Reset() {
	*x = GetSubmitRecordRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_goodguy_crawl_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSubmitRecordRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubmitRecordRequest) ProtoMessage() {}

func (x *GetSubmitRecordRequest) ProtoReflect() protoreflect.Message {
	mi := &file_goodguy_crawl_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubmitRecordRequest.ProtoReflect.Descriptor instead.
func (*GetSubmitRecordRequest) Descriptor() ([]byte, []int) {
	return file_goodguy_crawl_proto_rawDescGZIP(), []int{3}
}

func (x *GetSubmitRecordRequest) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

func (x *GetSubmitRecordRequest) GetHandle() string {
	if x != nil {
		return x.Handle
	}
	return ""
}

func (x *GetSubmitRecordRequest) GetAuthInfo() *AuthInfo {
	if x != nil {
		return x.AuthInfo
	}
	return nil
}

type GetSubmitRecordResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProfileUrl     string                                  `protobuf:"bytes,1,opt,name=profile_url,json=profileUrl,proto3" json:"profile_url,omitempty"`                                                                                                      // 用户页面URL
	AcceptCount    int32                                   `protobuf:"varint,2,opt,name=accept_count,json=acceptCount,proto3" json:"accept_count,omitempty"`                                                                                                  // 用户总AC数
	SubmitCount    int32                                   `protobuf:"varint,3,opt,name=submit_count,json=submitCount,proto3" json:"submit_count,omitempty"`                                                                                                  // 用户总提交数
	Distribution   map[int32]int32                         `protobuf:"bytes,4,rep,name=distribution,proto3" json:"distribution,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`                          // 做题难度分布 有的平台才有
	OjDistribution map[string]int32                        `protobuf:"bytes,5,rep,name=oj_distribution,json=ojDistribution,proto3" json:"oj_distribution,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"` // OJ做题分布 只有vjudge有
	Platform       string                                  `protobuf:"bytes,6,opt,name=platform,proto3" json:"platform,omitempty"`
	Handle         string                                  `protobuf:"bytes,7,opt,name=handle,proto3" json:"handle,omitempty"`
	SubmitRecord   []*GetSubmitRecordResponse_SubmitRecord `protobuf:"bytes,8,rep,name=submit_record,json=submitRecord,proto3" json:"submit_record,omitempty"`
}

func (x *GetSubmitRecordResponse) Reset() {
	*x = GetSubmitRecordResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_goodguy_crawl_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSubmitRecordResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubmitRecordResponse) ProtoMessage() {}

func (x *GetSubmitRecordResponse) ProtoReflect() protoreflect.Message {
	mi := &file_goodguy_crawl_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubmitRecordResponse.ProtoReflect.Descriptor instead.
func (*GetSubmitRecordResponse) Descriptor() ([]byte, []int) {
	return file_goodguy_crawl_proto_rawDescGZIP(), []int{4}
}

func (x *GetSubmitRecordResponse) GetProfileUrl() string {
	if x != nil {
		return x.ProfileUrl
	}
	return ""
}

func (x *GetSubmitRecordResponse) GetAcceptCount() int32 {
	if x != nil {
		return x.AcceptCount
	}
	return 0
}

func (x *GetSubmitRecordResponse) GetSubmitCount() int32 {
	if x != nil {
		return x.SubmitCount
	}
	return 0
}

func (x *GetSubmitRecordResponse) GetDistribution() map[int32]int32 {
	if x != nil {
		return x.Distribution
	}
	return nil
}

func (x *GetSubmitRecordResponse) GetOjDistribution() map[string]int32 {
	if x != nil {
		return x.OjDistribution
	}
	return nil
}

func (x *GetSubmitRecordResponse) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

func (x *GetSubmitRecordResponse) GetHandle() string {
	if x != nil {
		return x.Handle
	}
	return ""
}

func (x *GetSubmitRecordResponse) GetSubmitRecord() []*GetSubmitRecordResponse_SubmitRecord {
	if x != nil {
		return x.SubmitRecord
	}
	return nil
}

type GetRecentContestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Platform string `protobuf:"bytes,1,opt,name=platform,proto3" json:"platform,omitempty"`
}

func (x *GetRecentContestRequest) Reset() {
	*x = GetRecentContestRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_goodguy_crawl_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRecentContestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRecentContestRequest) ProtoMessage() {}

func (x *GetRecentContestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_goodguy_crawl_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRecentContestRequest.ProtoReflect.Descriptor instead.
func (*GetRecentContestRequest) Descriptor() ([]byte, []int) {
	return file_goodguy_crawl_proto_rawDescGZIP(), []int{5}
}

func (x *GetRecentContestRequest) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

type GetRecentContestResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecentContest []*GetRecentContestResponse_Contest `protobuf:"bytes,1,rep,name=recent_contest,json=recentContest,proto3" json:"recent_contest,omitempty"`
	Platform      string                              `protobuf:"bytes,2,opt,name=platform,proto3" json:"platform,omitempty"`
}

func (x *GetRecentContestResponse) Reset() {
	*x = GetRecentContestResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_goodguy_crawl_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRecentContestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRecentContestResponse) ProtoMessage() {}

func (x *GetRecentContestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_goodguy_crawl_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRecentContestResponse.ProtoReflect.Descriptor instead.
func (*GetRecentContestResponse) Descriptor() ([]byte, []int) {
	return file_goodguy_crawl_proto_rawDescGZIP(), []int{6}
}

func (x *GetRecentContestResponse) GetRecentContest() []*GetRecentContestResponse_Contest {
	if x != nil {
		return x.RecentContest
	}
	return nil
}

func (x *GetRecentContestResponse) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

type GetDailyQuestionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Platform string `protobuf:"bytes,1,opt,name=platform,proto3" json:"platform,omitempty"`
}

func (x *GetDailyQuestionRequest) Reset() {
	*x = GetDailyQuestionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_goodguy_crawl_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDailyQuestionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDailyQuestionRequest) ProtoMessage() {}

func (x *GetDailyQuestionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_goodguy_crawl_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDailyQuestionRequest.ProtoReflect.Descriptor instead.
func (*GetDailyQuestionRequest) Descriptor() ([]byte, []int) {
	return file_goodguy_crawl_proto_rawDescGZIP(), []int{7}
}

func (x *GetDailyQuestionRequest) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

type GetDailyQuestionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Problem []*GetDailyQuestionResponse_Problem `protobuf:"bytes,1,rep,name=problem,proto3" json:"problem,omitempty"`
}

func (x *GetDailyQuestionResponse) Reset() {
	*x = GetDailyQuestionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_goodguy_crawl_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDailyQuestionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDailyQuestionResponse) ProtoMessage() {}

func (x *GetDailyQuestionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_goodguy_crawl_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDailyQuestionResponse.ProtoReflect.Descriptor instead.
func (*GetDailyQuestionResponse) Descriptor() ([]byte, []int) {
	return file_goodguy_crawl_proto_rawDescGZIP(), []int{8}
}

func (x *GetDailyQuestionResponse) GetProblem() []*GetDailyQuestionResponse_Problem {
	if x != nil {
		return x.Problem
	}
	return nil
}

type GetContestRecordResponse_Record struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`            // 比赛名称
	Url       string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`              // 比赛链接
	Timestamp int64  `protobuf:"varint,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"` // 比赛时间 单位：秒
	Rating    int32  `protobuf:"varint,4,opt,name=rating,proto3" json:"rating,omitempty"`       // 结果rating
}

func (x *GetContestRecordResponse_Record) Reset() {
	*x = GetContestRecordResponse_Record{}
	if protoimpl.UnsafeEnabled {
		mi := &file_goodguy_crawl_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetContestRecordResponse_Record) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetContestRecordResponse_Record) ProtoMessage() {}

func (x *GetContestRecordResponse_Record) ProtoReflect() protoreflect.Message {
	mi := &file_goodguy_crawl_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetContestRecordResponse_Record.ProtoReflect.Descriptor instead.
func (*GetContestRecordResponse_Record) Descriptor() ([]byte, []int) {
	return file_goodguy_crawl_proto_rawDescGZIP(), []int{2, 0}
}

func (x *GetContestRecordResponse_Record) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetContestRecordResponse_Record) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *GetContestRecordResponse_Record) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *GetContestRecordResponse_Record) GetRating() int32 {
	if x != nil {
		return x.Rating
	}
	return 0
}

type GetSubmitRecordResponse_SubmitRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProblemName         string                                                   `protobuf:"bytes,1,opt,name=problem_name,json=problemName,proto3" json:"problem_name,omitempty"`                                                                                                      // 题目名
	ProblemUrl          string                                                   `protobuf:"bytes,2,opt,name=problem_url,json=problemUrl,proto3" json:"problem_url,omitempty"`                                                                                                         // 题目链接
	SubmitTime          int64                                                    `protobuf:"varint,3,opt,name=submit_time,json=submitTime,proto3" json:"submit_time,omitempty"`                                                                                                        // 提交时间戳 单位秒
	Verdict             GetSubmitRecordResponse_SubmitRecord_Verdict             `protobuf:"varint,4,opt,name=verdict,proto3,enum=goodguy_crawl.GetSubmitRecordResponse_SubmitRecord_Verdict" json:"verdict,omitempty"`                                                                // 提交状态
	RunningTime         int32                                                    `protobuf:"varint,5,opt,name=running_time,json=runningTime,proto3" json:"running_time,omitempty"`                                                                                                     // 代码运行时间 单位毫秒
	ProgrammingLanguage GetSubmitRecordResponse_SubmitRecord_ProgrammingLanguage `protobuf:"varint,6,opt,name=programming_language,json=programmingLanguage,proto3,enum=goodguy_crawl.GetSubmitRecordResponse_SubmitRecord_ProgrammingLanguage" json:"programming_language,omitempty"` // 提交语言
}

func (x *GetSubmitRecordResponse_SubmitRecord) Reset() {
	*x = GetSubmitRecordResponse_SubmitRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_goodguy_crawl_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSubmitRecordResponse_SubmitRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubmitRecordResponse_SubmitRecord) ProtoMessage() {}

func (x *GetSubmitRecordResponse_SubmitRecord) ProtoReflect() protoreflect.Message {
	mi := &file_goodguy_crawl_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubmitRecordResponse_SubmitRecord.ProtoReflect.Descriptor instead.
func (*GetSubmitRecordResponse_SubmitRecord) Descriptor() ([]byte, []int) {
	return file_goodguy_crawl_proto_rawDescGZIP(), []int{4, 0}
}

func (x *GetSubmitRecordResponse_SubmitRecord) GetProblemName() string {
	if x != nil {
		return x.ProblemName
	}
	return ""
}

func (x *GetSubmitRecordResponse_SubmitRecord) GetProblemUrl() string {
	if x != nil {
		return x.ProblemUrl
	}
	return ""
}

func (x *GetSubmitRecordResponse_SubmitRecord) GetSubmitTime() int64 {
	if x != nil {
		return x.SubmitTime
	}
	return 0
}

func (x *GetSubmitRecordResponse_SubmitRecord) GetVerdict() GetSubmitRecordResponse_SubmitRecord_Verdict {
	if x != nil {
		return x.Verdict
	}
	return GetSubmitRecordResponse_SubmitRecord_Other
}

func (x *GetSubmitRecordResponse_SubmitRecord) GetRunningTime() int32 {
	if x != nil {
		return x.RunningTime
	}
	return 0
}

func (x *GetSubmitRecordResponse_SubmitRecord) GetProgrammingLanguage() GetSubmitRecordResponse_SubmitRecord_ProgrammingLanguage {
	if x != nil {
		return x.ProgrammingLanguage
	}
	return GetSubmitRecordResponse_SubmitRecord_Unknown
}

type GetRecentContestResponse_Contest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      string            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`                                                                                                              // 比赛名称
	Url       string            `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`                                                                                                                // 比赛地址
	Timestamp int64             `protobuf:"varint,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`                                                                                                   // 比赛开始时间 单位：秒
	ExtInfo   map[string]string `protobuf:"bytes,4,rep,name=ext_info,json=extInfo,proto3" json:"ext_info,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // 额外信息
	Duration  int32             `protobuf:"varint,5,opt,name=duration,proto3" json:"duration,omitempty"`                                                                                                     // 比赛时长 单位：秒
}

func (x *GetRecentContestResponse_Contest) Reset() {
	*x = GetRecentContestResponse_Contest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_goodguy_crawl_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRecentContestResponse_Contest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRecentContestResponse_Contest) ProtoMessage() {}

func (x *GetRecentContestResponse_Contest) ProtoReflect() protoreflect.Message {
	mi := &file_goodguy_crawl_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRecentContestResponse_Contest.ProtoReflect.Descriptor instead.
func (*GetRecentContestResponse_Contest) Descriptor() ([]byte, []int) {
	return file_goodguy_crawl_proto_rawDescGZIP(), []int{6, 0}
}

func (x *GetRecentContestResponse_Contest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetRecentContestResponse_Contest) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *GetRecentContestResponse_Contest) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *GetRecentContestResponse_Contest) GetExtInfo() map[string]string {
	if x != nil {
		return x.ExtInfo
	}
	return nil
}

func (x *GetRecentContestResponse_Contest) GetDuration() int32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

type GetDailyQuestionResponse_Problem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Platform   string            `protobuf:"bytes,1,opt,name=platform,proto3" json:"platform,omitempty"`
	Url        string            `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	Id         string            `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	Name       string            `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Difficulty string            `protobuf:"bytes,5,opt,name=difficulty,proto3" json:"difficulty,omitempty"`
	Extra      map[string]string `protobuf:"bytes,6,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetDailyQuestionResponse_Problem) Reset() {
	*x = GetDailyQuestionResponse_Problem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_goodguy_crawl_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDailyQuestionResponse_Problem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDailyQuestionResponse_Problem) ProtoMessage() {}

func (x *GetDailyQuestionResponse_Problem) ProtoReflect() protoreflect.Message {
	mi := &file_goodguy_crawl_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDailyQuestionResponse_Problem.ProtoReflect.Descriptor instead.
func (*GetDailyQuestionResponse_Problem) Descriptor() ([]byte, []int) {
	return file_goodguy_crawl_proto_rawDescGZIP(), []int{8, 0}
}

func (x *GetDailyQuestionResponse_Problem) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

func (x *GetDailyQuestionResponse_Problem) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *GetDailyQuestionResponse_Problem) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetDailyQuestionResponse_Problem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetDailyQuestionResponse_Problem) GetDifficulty() string {
	if x != nil {
		return x.Difficulty
	}
	return ""
}

func (x *GetDailyQuestionResponse_Problem) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

var File_goodguy_crawl_proto protoreflect.FileDescriptor

var file_goodguy_crawl_proto_rawDesc = []byte{
	0x0a, 0x13, 0x67, 0x6f, 0x6f, 0x64, 0x67, 0x75, 0x79, 0x5f, 0x63, 0x72, 0x61, 0x77, 0x6c, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x67, 0x6f, 0x6f, 0x64, 0x67, 0x75, 0x79, 0x5f, 0x63,
	0x72, 0x61, 0x77, 0x6c, 0x22, 0x42, 0x0a, 0x08, 0x41, 0x75, 0x74, 0x68, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x4d, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12,
	0x16, 0x0a, 0x06, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x22, 0xcd, 0x02, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f,
	0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x16, 0x0a,
	0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x46, 0x0a, 0x06, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x67, 0x75, 0x79, 0x5f,
	0x63, 0x72, 0x61, 0x77, 0x6c, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x06, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x61, 0x6e,
	0x64, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x68, 0x61, 0x6e, 0x64, 0x6c,
	0x65, 0x1a, 0x64, 0x0a, 0x06, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72,
	0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12,
	0x16, 0x0a, 0x06, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x22, 0x95, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x53,
	0x75, 0x62, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x16,
	0x0a, 0x06, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x39, 0x0a, 0x09, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x64,
	0x67, 0x75, 0x79, 0x5f, 0x63, 0x72, 0x61, 0x77, 0x6c, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x49, 0x6e,
	0x66, 0x6f, 0x48, 0x00, 0x52, 0x08, 0x61, 0x75, 0x74, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x88, 0x01,
	0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x22,
	0xb7, 0x0c, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x70,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x21, 0x0a, 0x0c,
	0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x21, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x5c, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x67,
	0x75, 0x79, 0x5f, 0x63, 0x72, 0x61, 0x77, 0x6c, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6d,
	0x69, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0c, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x63, 0x0a, 0x0f, 0x6f, 0x6a, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x67, 0x6f, 0x6f, 0x64,
	0x67, 0x75, 0x79, 0x5f, 0x63, 0x72, 0x61, 0x77, 0x6c, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62,
	0x6d, 0x69, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x4f, 0x6a, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x6f, 0x6a, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x58, 0x0a, 0x0d, 0x73, 0x75, 0x62,
	0x6d, 0x69, 0x74, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x33, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x67, 0x75, 0x79, 0x5f, 0x63, 0x72, 0x61, 0x77, 0x6c,
	0x2e, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x1a, 0xdf, 0x07, 0x0a, 0x0c, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x62,
	0x6c, 0x65, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x62, 0x6c,
	0x65, 0x6d, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72,
	0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x55, 0x72, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x75, 0x62, 0x6d,
	0x69, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x73,
	0x75, 0x62, 0x6d, 0x69, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x55, 0x0a, 0x07, 0x76, 0x65, 0x72,
	0x64, 0x69, 0x63, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3b, 0x2e, 0x67, 0x6f, 0x6f,
	0x64, 0x67, 0x75, 0x79, 0x5f, 0x63, 0x72, 0x61, 0x77, 0x6c, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x75,
	0x62, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e,
	0x56, 0x65, 0x72, 0x64, 0x69, 0x63, 0x74, 0x52, 0x07, 0x76, 0x65, 0x72, 0x64, 0x69, 0x63, 0x74,
	0x12, 0x21, 0x0a, 0x0c, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x7a, 0x0a, 0x14, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x6d, 0x69,
	0x6e, 0x67, 0x5f, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x47, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x67, 0x75, 0x79, 0x5f, 0x63, 0x72, 0x61, 0x77,
	0x6c, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x6d, 0x69,
	0x6e, 0x67, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x52, 0x13, 0x70, 0x72, 0x6f, 0x67,
	0x72, 0x61, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x22,
	0xdb, 0x02, 0x0a, 0x07, 0x56, 0x65, 0x72, 0x64, 0x69, 0x63, 0x74, 0x12, 0x09, 0x0a, 0x05, 0x4f,
	0x74, 0x68, 0x65, 0x72, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74,
	0x65, 0x64, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x57, 0x72, 0x6f, 0x6e, 0x67, 0x41, 0x6e, 0x73,
	0x77, 0x65, 0x72, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x54, 0x69, 0x6d, 0x65, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x45, 0x78, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x10, 0x04, 0x12, 0x17,
	0x0a, 0x13, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x45, 0x78, 0x63,
	0x65, 0x65, 0x64, 0x65, 0x64, 0x10, 0x05, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x6f, 0x6d, 0x70, 0x69,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x06, 0x12, 0x15, 0x0a,
	0x11, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x10, 0x07, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x64, 0x6c, 0x65, 0x6e, 0x65, 0x73, 0x73,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x45, 0x78, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x10, 0x08, 0x12,
	0x14, 0x0a, 0x10, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x56, 0x69, 0x6f, 0x6c, 0x61,
	0x74, 0x65, 0x64, 0x10, 0x09, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x72, 0x61, 0x73, 0x68, 0x65, 0x64,
	0x10, 0x0a, 0x12, 0x1b, 0x0a, 0x17, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x72, 0x65, 0x70, 0x61,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x61, 0x73, 0x68, 0x65, 0x64, 0x10, 0x0b, 0x12,
	0x0b, 0x0a, 0x07, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x10, 0x0c, 0x12, 0x0e, 0x0a, 0x0a,
	0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x64, 0x10, 0x0d, 0x12, 0x0b, 0x0a, 0x07,
	0x53, 0x6b, 0x69, 0x70, 0x70, 0x65, 0x64, 0x10, 0x0e, 0x12, 0x0b, 0x0a, 0x07, 0x54, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x67, 0x10, 0x0f, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x10, 0x10, 0x12, 0x17, 0x0a, 0x13, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x45, 0x78, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x10, 0x11, 0x22, 0x95, 0x02,
	0x0a, 0x13, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x4c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e,
	0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x43, 0x70, 0x70, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x4a,
	0x61, 0x76, 0x61, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x10,
	0x03, 0x12, 0x0a, 0x0a, 0x06, 0x47, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x10, 0x04, 0x12, 0x05, 0x0a,
	0x01, 0x43, 0x10, 0x05, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x53, 0x68, 0x61, 0x72, 0x70, 0x10, 0x06,
	0x12, 0x0a, 0x0a, 0x06, 0x4b, 0x6f, 0x74, 0x6c, 0x69, 0x6e, 0x10, 0x07, 0x12, 0x0e, 0x0a, 0x0a,
	0x4a, 0x61, 0x76, 0x61, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x10, 0x08, 0x12, 0x0e, 0x0a, 0x0a,
	0x54, 0x79, 0x70, 0x65, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x10, 0x09, 0x12, 0x07, 0x0a, 0x03,
	0x4c, 0x75, 0x61, 0x10, 0x0a, 0x12, 0x0e, 0x0a, 0x0a, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x43, 0x10, 0x0b, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x77, 0x69, 0x66, 0x74, 0x10, 0x0c,
	0x12, 0x08, 0x0a, 0x04, 0x52, 0x75, 0x73, 0x74, 0x10, 0x0d, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x63,
	0x61, 0x6c, 0x61, 0x10, 0x0e, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x61, 0x73, 0x63, 0x61, 0x6c, 0x10,
	0x0f, 0x12, 0x0b, 0x0a, 0x07, 0x48, 0x61, 0x73, 0x6b, 0x65, 0x6c, 0x6c, 0x10, 0x10, 0x12, 0x08,
	0x0a, 0x04, 0x52, 0x75, 0x62, 0x79, 0x10, 0x11, 0x12, 0x07, 0x0a, 0x03, 0x50, 0x48, 0x50, 0x10,
	0x12, 0x12, 0x0a, 0x0a, 0x06, 0x45, 0x72, 0x6c, 0x61, 0x6e, 0x67, 0x10, 0x13, 0x12, 0x0a, 0x0a,
	0x06, 0x45, 0x6c, 0x69, 0x78, 0x69, 0x72, 0x10, 0x14, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x10, 0x15, 0x1a, 0x3f, 0x0a, 0x11, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x41, 0x0a, 0x13, 0x4f, 0x6a, 0x44, 0x69, 0x73, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x35, 0x0a, 0x17, 0x47, 0x65, 0x74,
	0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x22, 0x8f, 0x03, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x56, 0x0a,
	0x0e, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x67, 0x75, 0x79, 0x5f,
	0x63, 0x72, 0x61, 0x77, 0x6c, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x52, 0x0d, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x1a, 0xfe, 0x01, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x75, 0x72, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x12, 0x57, 0x0a, 0x08, 0x65, 0x78, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x67, 0x75, 0x79, 0x5f, 0x63, 0x72,
	0x61, 0x77, 0x6c, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x73, 0x74, 0x2e, 0x45, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x07, 0x65, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x3a, 0x0a, 0x0c, 0x45, 0x78, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x35, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x51, 0x75,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x22, 0xef, 0x02, 0x0a, 0x18, 0x47, 0x65,
	0x74, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65,
	0x6d, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x67, 0x75,
	0x79, 0x5f, 0x63, 0x72, 0x61, 0x77, 0x6c, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x61, 0x69, 0x6c, 0x79,
	0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65,
	0x6d, 0x1a, 0x87, 0x02, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x12,
	0x50, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a,
	0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x67, 0x75, 0x79, 0x5f, 0x63, 0x72, 0x61, 0x77, 0x6c, 0x2e, 0x47,
	0x65, 0x74, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x2e,
	0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72,
	0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x32, 0xa6, 0x03, 0x0a, 0x13,
	0x47, 0x6f, 0x6f, 0x64, 0x67, 0x75, 0x79, 0x43, 0x72, 0x61, 0x77, 0x6c, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x63, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73,
	0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x26, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x67, 0x75,
	0x79, 0x5f, 0x63, 0x72, 0x61, 0x77, 0x6c, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x73, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x67, 0x75, 0x79, 0x5f, 0x63, 0x72, 0x61, 0x77, 0x6c, 0x2e,
	0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x60, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x53,
	0x75, 0x62, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x25, 0x2e, 0x67, 0x6f,
	0x6f, 0x64, 0x67, 0x75, 0x79, 0x5f, 0x63, 0x72, 0x61, 0x77, 0x6c, 0x2e, 0x47, 0x65, 0x74, 0x53,
	0x75, 0x62, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x26, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x67, 0x75, 0x79, 0x5f, 0x63, 0x72, 0x61,
	0x77, 0x6c, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x63, 0x0a, 0x10, 0x47, 0x65,
	0x74, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x12, 0x26,
	0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x67, 0x75, 0x79, 0x5f, 0x63, 0x72, 0x61, 0x77, 0x6c, 0x2e, 0x47,
	0x65, 0x74, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x67, 0x75, 0x79,
	0x5f, 0x63, 0x72, 0x61, 0x77, 0x6c, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x63, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x51, 0x75, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x26, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x67, 0x75, 0x79, 0x5f, 0x63, 0x72,
	0x61, 0x77, 0x6c, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x51, 0x75, 0x65, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x67, 0x6f,
	0x6f, 0x64, 0x67, 0x75, 0x79, 0x5f, 0x63, 0x72, 0x61, 0x77, 0x6c, 0x2e, 0x47, 0x65, 0x74, 0x44,
	0x61, 0x69, 0x6c, 0x79, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_goodguy_crawl_proto_rawDescOnce sync.Once
	file_goodguy_crawl_proto_rawDescData = file_goodguy_crawl_proto_rawDesc
)

func file_goodguy_crawl_proto_rawDescGZIP() []byte {
	file_goodguy_crawl_proto_rawDescOnce.Do(func() {
		file_goodguy_crawl_proto_rawDescData = protoimpl.X.CompressGZIP(file_goodguy_crawl_proto_rawDescData)
	})
	return file_goodguy_crawl_proto_rawDescData
}

var file_goodguy_crawl_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_goodguy_crawl_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_goodguy_crawl_proto_goTypes = []interface{}{
	(GetSubmitRecordResponse_SubmitRecord_Verdict)(0),             // 0: goodguy_crawl.GetSubmitRecordResponse.SubmitRecord.Verdict
	(GetSubmitRecordResponse_SubmitRecord_ProgrammingLanguage)(0), // 1: goodguy_crawl.GetSubmitRecordResponse.SubmitRecord.ProgrammingLanguage
	(*AuthInfo)(nil),                             // 2: goodguy_crawl.AuthInfo
	(*GetContestRecordRequest)(nil),              // 3: goodguy_crawl.GetContestRecordRequest
	(*GetContestRecordResponse)(nil),             // 4: goodguy_crawl.GetContestRecordResponse
	(*GetSubmitRecordRequest)(nil),               // 5: goodguy_crawl.GetSubmitRecordRequest
	(*GetSubmitRecordResponse)(nil),              // 6: goodguy_crawl.GetSubmitRecordResponse
	(*GetRecentContestRequest)(nil),              // 7: goodguy_crawl.GetRecentContestRequest
	(*GetRecentContestResponse)(nil),             // 8: goodguy_crawl.GetRecentContestResponse
	(*GetDailyQuestionRequest)(nil),              // 9: goodguy_crawl.GetDailyQuestionRequest
	(*GetDailyQuestionResponse)(nil),             // 10: goodguy_crawl.GetDailyQuestionResponse
	(*GetContestRecordResponse_Record)(nil),      // 11: goodguy_crawl.GetContestRecordResponse.Record
	(*GetSubmitRecordResponse_SubmitRecord)(nil), // 12: goodguy_crawl.GetSubmitRecordResponse.SubmitRecord
	nil,                                      // 13: goodguy_crawl.GetSubmitRecordResponse.DistributionEntry
	nil,                                      // 14: goodguy_crawl.GetSubmitRecordResponse.OjDistributionEntry
	(*GetRecentContestResponse_Contest)(nil), // 15: goodguy_crawl.GetRecentContestResponse.Contest
	nil,                                      // 16: goodguy_crawl.GetRecentContestResponse.Contest.ExtInfoEntry
	(*GetDailyQuestionResponse_Problem)(nil), // 17: goodguy_crawl.GetDailyQuestionResponse.Problem
	nil,                                      // 18: goodguy_crawl.GetDailyQuestionResponse.Problem.ExtraEntry
}
var file_goodguy_crawl_proto_depIdxs = []int32{
	11, // 0: goodguy_crawl.GetContestRecordResponse.record:type_name -> goodguy_crawl.GetContestRecordResponse.Record
	2,  // 1: goodguy_crawl.GetSubmitRecordRequest.auth_info:type_name -> goodguy_crawl.AuthInfo
	13, // 2: goodguy_crawl.GetSubmitRecordResponse.distribution:type_name -> goodguy_crawl.GetSubmitRecordResponse.DistributionEntry
	14, // 3: goodguy_crawl.GetSubmitRecordResponse.oj_distribution:type_name -> goodguy_crawl.GetSubmitRecordResponse.OjDistributionEntry
	12, // 4: goodguy_crawl.GetSubmitRecordResponse.submit_record:type_name -> goodguy_crawl.GetSubmitRecordResponse.SubmitRecord
	15, // 5: goodguy_crawl.GetRecentContestResponse.recent_contest:type_name -> goodguy_crawl.GetRecentContestResponse.Contest
	17, // 6: goodguy_crawl.GetDailyQuestionResponse.problem:type_name -> goodguy_crawl.GetDailyQuestionResponse.Problem
	0,  // 7: goodguy_crawl.GetSubmitRecordResponse.SubmitRecord.verdict:type_name -> goodguy_crawl.GetSubmitRecordResponse.SubmitRecord.Verdict
	1,  // 8: goodguy_crawl.GetSubmitRecordResponse.SubmitRecord.programming_language:type_name -> goodguy_crawl.GetSubmitRecordResponse.SubmitRecord.ProgrammingLanguage
	16, // 9: goodguy_crawl.GetRecentContestResponse.Contest.ext_info:type_name -> goodguy_crawl.GetRecentContestResponse.Contest.ExtInfoEntry
	18, // 10: goodguy_crawl.GetDailyQuestionResponse.Problem.extra:type_name -> goodguy_crawl.GetDailyQuestionResponse.Problem.ExtraEntry
	3,  // 11: goodguy_crawl.GoodguyCrawlService.GetContestRecord:input_type -> goodguy_crawl.GetContestRecordRequest
	5,  // 12: goodguy_crawl.GoodguyCrawlService.GetSubmitRecord:input_type -> goodguy_crawl.GetSubmitRecordRequest
	7,  // 13: goodguy_crawl.GoodguyCrawlService.GetRecentContest:input_type -> goodguy_crawl.GetRecentContestRequest
	9,  // 14: goodguy_crawl.GoodguyCrawlService.GetDailyQuestion:input_type -> goodguy_crawl.GetDailyQuestionRequest
	4,  // 15: goodguy_crawl.GoodguyCrawlService.GetContestRecord:output_type -> goodguy_crawl.GetContestRecordResponse
	6,  // 16: goodguy_crawl.GoodguyCrawlService.GetSubmitRecord:output_type -> goodguy_crawl.GetSubmitRecordResponse
	8,  // 17: goodguy_crawl.GoodguyCrawlService.GetRecentContest:output_type -> goodguy_crawl.GetRecentContestResponse
	10, // 18: goodguy_crawl.GoodguyCrawlService.GetDailyQuestion:output_type -> goodguy_crawl.GetDailyQuestionResponse
	15, // [15:19] is the sub-list for method output_type
	11, // [11:15] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_goodguy_crawl_proto_init() }
func file_goodguy_crawl_proto_init() {
	if File_goodguy_crawl_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_goodguy_crawl_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_goodguy_crawl_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetContestRecordRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_goodguy_crawl_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetContestRecordResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_goodguy_crawl_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSubmitRecordRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_goodguy_crawl_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSubmitRecordResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_goodguy_crawl_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRecentContestRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_goodguy_crawl_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRecentContestResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_goodguy_crawl_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDailyQuestionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_goodguy_crawl_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDailyQuestionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_goodguy_crawl_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetContestRecordResponse_Record); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_goodguy_crawl_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSubmitRecordResponse_SubmitRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_goodguy_crawl_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRecentContestResponse_Contest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_goodguy_crawl_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDailyQuestionResponse_Problem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_goodguy_crawl_proto_msgTypes[3].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_goodguy_crawl_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_goodguy_crawl_proto_goTypes,
		DependencyIndexes: file_goodguy_crawl_proto_depIdxs,
		EnumInfos:         file_goodguy_crawl_proto_enumTypes,
		MessageInfos:      file_goodguy_crawl_proto_msgTypes,
	}.Build()
	File_goodguy_crawl_proto = out.File
	file_goodguy_crawl_proto_rawDesc = nil
	file_goodguy_crawl_proto_goTypes = nil
	file_goodguy_crawl_proto_depIdxs = nil
}
